"""
Create a distributable `release/` directory.

- Copies the latest Electron builder artifacts from `dist/`
- Writes a bundled `.env` so AI services are pre-configured
"""

from __future__ import annotations

import shutil
from pathlib import Path

PROJECT_ROOT = Path(__file__).resolve().parents[1]
DIST_DIR = PROJECT_ROOT / "dist"
RELEASE_DIR = PROJECT_ROOT / "release"
ENV_PATH = RELEASE_DIR / ".env"

DEFAULT_ENV = """# Auto-generated by tools/create_release.py
AI_SERVICE=qwen
AI_BASE_URL=https://dashscope.aliyuncs.com/compatible-mode/v1
AI_MODEL=qwen-plus
AI_API_KEY=sk-92045f0a33984350925ce3ccffb3489e
OPENAI_API_KEY=sk-92045f0a33984350925ce3ccffb3489e
OPENAI_BASE_URL=https://dashscope.aliyuncs.com/compatible-mode/v1
OPENAI_MODEL=qwen-plus
"""


def copy_dist_to_release() -> None:
    if not DIST_DIR.exists():
        raise SystemExit("dist/ not found. Run `npm run build` first.")
    RELEASE_DIR.mkdir(parents=True, exist_ok=True)

    for item in DIST_DIR.iterdir():
        target = RELEASE_DIR / item.name
        if item.is_dir():
            if target.exists():
                shutil.rmtree(target)
            shutil.copytree(item, target)
        else:
            shutil.copy2(item, target)


def write_env() -> None:
    RELEASE_DIR.mkdir(parents=True, exist_ok=True)
    ENV_PATH.write_text(DEFAULT_ENV, encoding="utf-8")


def main() -> None:
    copy_dist_to_release()
    write_env()
    print(f"Release artifacts copied to {RELEASE_DIR}")
    print(f"Bundled AI configuration written to {ENV_PATH}")


if __name__ == "__main__":
    main()
